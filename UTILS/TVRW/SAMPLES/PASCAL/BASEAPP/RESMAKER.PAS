{**************************************************************************
  RESMAKER.PAS Resource maker program

  Copyright (C) 1996 BitSoft Development, L.L.C.

  Generated by Turbo Vision Resource WorkShop
***************************************************************************}

program RESMAKER;
uses
  Drivers, Objects, Views, Dialogs, Menus, Validate, Editors, StdDlg, App,
  { Added the constants unit to the uses clause }
  Types;

function MakeAboutBox: PDialog;
var
  Control, Crnt, Peer: PView;
  R: TRect;
  SB1, SB2: PScrollBar;
  Dlg: PDialog;
  Strs: PStringCollection;
  V: PValidator;
begin
  R.Assign(20, 5, 59, 18);
  Dlg := New(PDialog, Init(R, 'About...'));
  with Dlg^ do begin
    Options := ofSelectable or ofTopSelect or ofBuffered or ofCenterX or ofCenterY or ofVersion20;
    R.Assign(14, 10, 24, 12);
    Crnt := New(PButton, Init(R, 'O~k~', cmOK, bfDefault));
    Crnt^.HelpCtx := hcAboutBox;
    Crnt^.Options := ofSelectable or ofFirstClick or ofPreProcess or ofPostProcess or ofCenterX;
    Insert(Crnt);
    R.Assign(10, 2, 29, 3);
    Control := New(PStaticText, Init(R, 'Sample Application'));
    Control^.Options := ofCenterX;
    Insert(Control);
    R.Assign(12, 4, 27, 5);
    Control := New(PStaticText, Init(R, 'Created using'));
    Insert(Control);
    R.Assign(4, 5, 35, 6);
    Control := New(PStaticText, Init(R, 'Turbo Vision Resource Workshop'));
    Control^.Options := ofCenterX;
    Insert(Control);
    R.Assign(10, 7, 29, 8);
    Control := New(PStaticText, Init(R, 'Copyright (C) 1996'));
    Control^.Options := ofCenterX;
    Insert(Control);
    R.Assign(5, 8, 33, 9);
    Control := New(PStaticText, Init(R, 'BitSoft Development, L.L.C.'));
    Control^.Options := ofCenterX;
    Insert(Control);
    Crnt^.Select;
  end;
  MakeAboutBox := PDialog(Dlg);
end;

function MakeSampleMenu: PMenuBar;
var
  Menu: PMenuBar;
  R: TRect;
begin
  R.Assign(0, 0, 80, 1);
  Menu := New(PMenuBar, Init(R, NewMenu(
    NewSubMenu('~F~ile', hcNoContext, NewMenu(
      NewItem('~N~ew', '', kbNoKey, cmNew, hcNew,
      NewItem('~O~pen...', 'F3', kbF3, cmOpen, hcOpen,
      NewItem('~S~ave', 'F2', kbF2, cmSave, hcSave,
      NewItem('S~a~ve as...', '', kbNoKey, cmSaveAs, hcSaveAs,
      NewItem('Save a~l~l', '', kbNoKey, cmSaveAll, hcSaveAll,
      NewLine(
      NewItem('~C~hange dir...', '', kbNoKey, cmChangeDir, hcChangeDir,
      NewItem('~D~OS shell', '', kbNoKey, cmDosShell, hcDosShell,
      NewItem('E~x~it', 'Alt+X', kbAltX, cmQuit, hcExit,
      nil)))))))))),
    NewSubMenu('~E~dit', hcNoContext, NewMenu(
      NewItem('~U~ndo', '', kbAltBack, cmUndo, hcUndo,
      NewLine(
      NewItem('Cu~t~', 'Shift+Del', kbShiftDel, cmCut, hcCut,
      NewItem('~C~opy', 'Ctrl+Ins', kbCtrlIns, cmCopy, hcCopy,
      NewItem('~P~aste', 'Shift+Ins', kbShiftIns, cmPaste, hcPaste,
      NewItem('C~l~ear', 'Ctrl+Del', kbCtrlDel, cmClear, hcClear,
      nil))))))),
    NewSubMenu('~S~ample Menu', hcSampleMenu, NewMenu(
      NewItem('Sample ~I~tem', 'Alt-I', kbAltI, 100, hcSampleItem,
      nil)),
    NewSubMenu('~W~indow', hcNoContext, NewMenu(
      NewItem('~T~ile', '', kbNoKey, cmTile, hcTile,
      NewItem('C~a~scade', '', kbNoKey, cmCascade, hcCascade,
      NewItem('Cl~o~se all', '', kbNoKey, cmCloseAll, hcCloseAll,
      NewLine(
      NewItem('~S~ize/Move', 'Ctrl+F5', kbCtrlF5, cmResize, hcResize,
      NewItem('~Z~oom', 'F5', kbF5, cmZoom, hcZoom,
      NewItem('~N~ext', 'F6', kbF6, cmNext, hcNext,
      NewItem('~P~revious', 'Shift+F6', kbShiftF6, cmPrev, hcPrev,
      NewItem('~C~lose', 'Alt+F3', kbAltF3, cmClose, hcClose,
      nil)))))))))),
    NewSubMenu('~H~elp', hcNoContext, NewMenu(
      NewItem('~C~ontents', 'F1', kbF1, cmHelp, hcHelp,
      NewItem('~I~ndex', 'Shift+F1', kbShiftF1, cmIndex, hcIndex,
      NewItem('~P~revious topic', 'Alt+F1', kbAltF1, cmPrevTopic, hcPrevTopic,
      NewItem('~U~sing help', '', kbNoKey, cmHelpOnHelp, hcHelpOnHelp,
      NewLine(
      NewItem('~A~bout', '', kbNoKey, cmAbout, hcAbout,
      nil))))))),
    nil))))))
  ));
  MakeSampleMenu := Menu;
end;

function MakeSampleStatus: PStatusLine;
var
  Stat: PStatusLine;
  R: TRect;
begin
  R.Assign(0, 24, 80, 25);
  Stat := New(PStatusLine, Init(R,
    NewStatusDef(hcDragging, hcDragging,
      NewStatusKey('~'#27#26'~ Move', kbNoKey, 0,
      NewStatusKey('~Shift+'#27#26'~ Resize', kbNoKey, 0,
      NewStatusKey('~ÄÄÙ~ Done', kbNoKey, 0,
      NewStatusKey('~Esc~ Cancel', kbNoKey, 0,
      nil)))),
    NewStatusDef(hcAboutBox, hcAboutBox,
      NewStatusKey('~ENTER~ Exit the About Box', kbNoKey, cmOK,
      nil),
    NewStatusDef(hcNoContext, $FFFF,
      NewStatusKey('~F1~ Help', kbF1, cmHelp,
      NewStatusKey('~F2~ Save', kbF2, cmSave,
      NewStatusKey('~F3~ Open', kbF3, cmOpen,
      NewStatusKey('~F5~ Zoom', kbF5, cmZoom,
      NewStatusKey('~F6~ Next', kbF6, cmNext,
      NewStatusKey('', kbShiftF6, cmPrev,
      NewStatusKey('~F10~ Menu', kbF10, cmMenu,
      NewStatusKey('', kbAltF3, cmClose,
      NewStatusKey('', kbCtrlF5, cmResize,
      NewStatusKey('', kbAltX, cmQuit,
      nil)))))))))),
    nil)))
  ));
  MakeSampleStatus := Stat;
end;

var
  ResFile: PResourceFile;
  P: PObject;

begin
  RegisterObjects;
  RegisterViews;
  RegisterDialogs;
  RegisterValidate;
  RegisterEditors;
  RegisterStdDlg;
  RegisterMenus;
  RegisterApp;
  { Changed the name of the destination resource file }
  ResFile := New(PResourceFile, Init(New(PBufStream, Init('BASEAPP.RES',
    stCreate, 4096))));
  with ResFile^ do begin
    P := MakeAboutBox; ResFile^.Put(P, 'AboutBox'); Dispose(P, Done);
    P := MakeSampleMenu; ResFile^.Put(P, 'SampleMenu'); Dispose(P, Done);
    P := MakeSampleStatus; ResFile^.Put(P, 'SampleStatus'); Dispose(P, Done);
  end;
  Dispose(ResFile, Done);
end.
